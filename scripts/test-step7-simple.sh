#!/bin/bash

# Step 7 Simplified Testing Script
# Quick validation of PayPal Integration Final Configuration

echo "üß™ Step 7: PayPal Integration Testing (Simplified)"
echo "================================================="

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0

echo -e "${BLUE}üîç Test 1: Client ID Standardization${NC}"
echo "====================================="

# Check client ID consistency
EXPECTED_CLIENT_ID="AcPYlXozR8VS9kJSk7rv5MW36lMV66ZMyqZKjM0YVuvt0dJ1cIyHRvDmGeux0qu3gBOh6XswI5gin2WO"
INCONSISTENT_FILES=0

echo -n "Checking PayPal client ID standardization... "
for file in frontend/*.html; do
    if [ -f "$file" ] && grep -q "paypal.com/sdk" "$file"; then
        if ! grep -q "$EXPECTED_CLIENT_ID" "$file"; then
            INCONSISTENT_FILES=$((INCONSISTENT_FILES + 1))
            echo -e "\n${RED}‚ùå $file has inconsistent client ID${NC}"
        fi
    fi
done

if [ $INCONSISTENT_FILES -eq 0 ]; then
    echo -e "${GREEN}Passed ‚úÖ${NC}"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    echo -e "${RED}Failed ‚ùå ($INCONSISTENT_FILES files inconsistent)${NC}"
    FAILED_TESTS=$((FAILED_TESTS + 1))
fi
TOTAL_TESTS=$((TOTAL_TESTS + 1))

echo -e "${BLUE}‚öôÔ∏è Test 2: Environment Configuration${NC}"
echo "==================================="

echo -n "Checking environment files... "
ENV_ERRORS=0

if [ ! -f ".env" ]; then
    echo -e "\n${RED}‚ùå Main .env file missing${NC}"
    ENV_ERRORS=$((ENV_ERRORS + 1))
fi

if [ ! -f "backend/.env" ]; then
    echo -e "\n${RED}‚ùå Backend .env file missing${NC}"
    ENV_ERRORS=$((ENV_ERRORS + 1))
fi

# Check required PayPal variables
if [ -f "backend/.env" ]; then
    if ! grep -q "PAYPAL_CLIENT_ID=" "backend/.env"; then
        echo -e "\n${RED}‚ùå Missing PAYPAL_CLIENT_ID in backend/.env${NC}"
        ENV_ERRORS=$((ENV_ERRORS + 1))
    fi
    
    if ! grep -q "PAYPAL_CLIENT_SECRET=" "backend/.env"; then
        echo -e "\n${RED}‚ùå Missing PAYPAL_CLIENT_SECRET in backend/.env${NC}"
        ENV_ERRORS=$((ENV_ERRORS + 1))
    fi
fi

if [ $ENV_ERRORS -eq 0 ]; then
    echo -e "${GREEN}Passed ‚úÖ${NC}"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    echo -e "${RED}Failed ‚ùå ($ENV_ERRORS configuration errors)${NC}"
    FAILED_TESTS=$((FAILED_TESTS + 1))
fi
TOTAL_TESTS=$((TOTAL_TESTS + 1))

echo -e "${BLUE}üîß Test 3: SDK Configuration${NC}"
echo "============================="

echo -n "Checking PayPal SDK parameters... "
MISSING_PARAMS=0

# Required SDK parameters
REQUIRED_PARAMS=("currency=EUR" "locale=de_DE" "components=buttons")

for file in frontend/*.html; do
    if [ -f "$file" ] && grep -q "paypal.com/sdk" "$file"; then
        for param in "${REQUIRED_PARAMS[@]}"; do
            if ! grep -q "$param" "$file"; then
                MISSING_PARAMS=$((MISSING_PARAMS + 1))
                echo -e "\n${RED}‚ùå $file missing parameter: $param${NC}"
            fi
        done
    fi
done

if [ $MISSING_PARAMS -eq 0 ]; then
    echo -e "${GREEN}Passed ‚úÖ${NC}"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    echo -e "${RED}Failed ‚ùå ($MISSING_PARAMS missing parameters)${NC}"
    FAILED_TESTS=$((FAILED_TESTS + 1))
fi
TOTAL_TESTS=$((TOTAL_TESTS + 1))

echo -e "${BLUE}üìÑ Test 4: Frontend Integration${NC}"
echo "==============================="

echo -n "Checking PayPal integration in frontend files... "
INTEGRATION_ISSUES=0

# Check index.html for key PayPal functions
if [ -f "frontend/index.html" ]; then
    REQUIRED_FUNCTIONS=("createOrder" "onApprove" "onError" "onCancel")
    
    for func in "${REQUIRED_FUNCTIONS[@]}"; do
        if ! grep -q "$func" "frontend/index.html"; then
            INTEGRATION_ISSUES=$((INTEGRATION_ISSUES + 1))
            echo -e "\n${RED}‚ùå Missing function: $func${NC}"
        fi
    done
else
    echo -e "\n${RED}‚ùå index.html not found${NC}"
    INTEGRATION_ISSUES=$((INTEGRATION_ISSUES + 1))
fi

if [ $INTEGRATION_ISSUES -eq 0 ]; then
    echo -e "${GREEN}Passed ‚úÖ${NC}"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    echo -e "${RED}Failed ‚ùå ($INTEGRATION_ISSUES integration issues)${NC}"
    FAILED_TESTS=$((FAILED_TESTS + 1))
fi
TOTAL_TESTS=$((TOTAL_TESTS + 1))

echo -e "${BLUE}üöÄ Test 5: Server Capability${NC}"
echo "============================="

echo -n "Checking server configuration... "
cd backend
if node -c server.js 2>/dev/null; then
    echo -e "${GREEN}Passed ‚úÖ${NC}"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    echo -e "${RED}Failed ‚ùå (Server configuration invalid)${NC}"
    FAILED_TESTS=$((FAILED_TESTS + 1))
fi
TOTAL_TESTS=$((TOTAL_TESTS + 1))
cd ..

echo -e "${BLUE}üîê Test 6: Security Check${NC}"
echo "========================="

echo -n "Checking for security issues... "
SECURITY_ISSUES=0

# Check for hardcoded secrets in frontend
if grep -r "client_secret" frontend/ 2>/dev/null | grep -v ".git"; then
    echo -e "\n${RED}‚ùå Found potential hardcoded secrets in frontend${NC}"
    SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
fi

# Check that sensitive data is in .env files
if [ -f "backend/.env" ] && grep -q "PAYPAL_CLIENT_SECRET=" "backend/.env"; then
    # Good - secrets are in env file
    :
else
    echo -e "\n${RED}‚ùå PayPal client secret not properly configured${NC}"
    SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
fi

if [ $SECURITY_ISSUES -eq 0 ]; then
    echo -e "${GREEN}Passed ‚úÖ${NC}"
    PASSED_TESTS=$((PASSED_TESTS + 1))
else
    echo -e "${RED}Failed ‚ùå ($SECURITY_ISSUES security issues)${NC}"
    FAILED_TESTS=$((FAILED_TESTS + 1))
fi
TOTAL_TESTS=$((TOTAL_TESTS + 1))

# Summary
echo ""
echo -e "${BLUE}üìä Step 7 Test Results${NC}"
echo "======================"

SUCCESS_RATE=$((PASSED_TESTS * 100 / TOTAL_TESTS))

echo "Total Tests: $TOTAL_TESTS"
echo -e "Passed: ${GREEN}$PASSED_TESTS ‚úÖ${NC}"
echo -e "Failed: ${RED}$FAILED_TESTS ‚ùå${NC}"
echo -e "Success Rate: ${GREEN}$SUCCESS_RATE%${NC}"

echo ""
echo -e "${BLUE}üìã Test Coverage Summary${NC}"
echo "========================"
echo "‚úÖ Client ID Standardization"
echo "‚úÖ Environment Configuration"  
echo "‚úÖ SDK Parameter Validation"
echo "‚úÖ Frontend Integration Check"
echo "‚úÖ Server Configuration Validation"
echo "‚úÖ Security Assessment"

echo ""
if [ $FAILED_TESTS -eq 0 ]; then
    echo -e "${GREEN}üéâ Step 7 Testing Complete - All Tests Passed! ‚úÖ${NC}"
    echo -e "${GREEN}PayPal Integration is ready for production testing${NC}"
    exit 0
else
    echo -e "${RED}‚ùå Step 7 Testing Complete - $FAILED_TESTS Tests Failed${NC}"
    echo -e "${YELLOW}Please review failed tests and fix issues before proceeding${NC}"
    echo ""
    echo -e "${BLUE}üí° Quick Fix Guide:${NC}"
    echo "- Client ID issues: Run ./verify-paypal-integration.sh"
    echo "- Environment issues: Check .env files exist and have required variables"
    echo "- SDK issues: Verify PayPal script tags have all required parameters"
    echo "- Integration issues: Check PayPal functions exist in frontend files"
    echo "- Server issues: Check backend/server.js for syntax errors"
    echo "- Security issues: Move sensitive data to .env files"
    exit 1
fi
