{
  "info": {
    "name": "SichrPlace 100% Complete API Tests",
    "description": "Comprehensive API testing for 100% migration validation",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3001",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "apartmentId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "🏠 Core API Tests",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Health check returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Apartments",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/apartments",
              "host": ["{{baseUrl}}"],
              "path": ["api", "apartments"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});",
                  "",
                  "// Save first apartment ID for other tests",
                  "if (pm.response.json().length > 0) {",
                  "    pm.collectionVariables.set('apartmentId', pm.response.json()[0].id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Single Apartment",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/apartments/{{apartmentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "apartments", "{{apartmentId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains apartment details', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('title');",
                  "    pm.expect(jsonData).to.have.property('price');",
                  "    pm.expect(jsonData).to.have.property('location');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "👥 User Authentication",
      "item": [
        {
          "name": "Register New User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser_{{$randomInt}}\",\n  \"email\": \"test{{$randomInt}}@example.com\",\n  \"password\": \"securePassword123\",\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"role\": \"tenant\",\n  \"gdprConsent\": true,\n  \"dataProcessingConsent\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/users/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "users", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('User registration successful', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response contains user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user).to.have.property('id');",
                  "});",
                  "",
                  "// Save user ID and token for other tests",
                  "if (pm.response.json().user) {",
                  "    pm.collectionVariables.set('userId', pm.response.json().user.id);",
                  "}",
                  "if (pm.response.json().token) {",
                  "    pm.collectionVariables.set('authToken', pm.response.json().token);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Admin Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"omer3kale@gmail.com\",\n  \"password\": \"password\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "});",
                  "",
                  "// Save admin token",
                  "if (pm.response.json().token) {",
                  "    pm.collectionVariables.set('authToken', pm.response.json().token);",
                  "    pm.collectionVariables.set('userId', pm.response.json().user.id);",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "📅 Viewing Requests",
      "item": [
        {
          "name": "Create Viewing Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"apartmentId\": \"{{apartmentId}}\",\n  \"requesterId\": \"{{userId}}\",\n  \"preferredDate1\": \"2025-08-15T14:00:00Z\",\n  \"preferredDate2\": \"2025-08-16T15:00:00Z\",\n  \"preferredDate3\": \"2025-08-17T16:00:00Z\",\n  \"message\": \"I am very interested in viewing this property. Looking forward to hearing from you.\",\n  \"contactInfo\": {\n    \"phone\": \"+49123456789\",\n    \"email\": \"test@example.com\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/viewing-requests",
              "host": ["{{baseUrl}}"],
              "path": ["api", "viewing-requests"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Viewing request created', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response contains viewing request data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('viewingRequest');",
                  "    pm.expect(jsonData.viewingRequest).to.have.property('id');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User's Viewing Requests",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/viewing-requests/user/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "viewing-requests", "user", "{{userId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is an array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "🆕 New Features (100% Integration)",
      "item": [
        {
          "name": "Add to Favorites",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"apartmentId\": \"{{apartmentId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/favorites",
              "host": ["{{baseUrl}}"],
              "path": ["api", "favorites"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Favorite added successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Favorites",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/favorites",
              "host": ["{{baseUrl}}"],
              "path": ["api", "favorites"]
            }
          }
        },
        {
          "name": "Get Apartment Reviews",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/apartments/{{apartmentId}}/reviews",
              "host": ["{{baseUrl}}"],
              "path": ["api", "apartments", "{{apartmentId}}", "reviews"]
            }
          }
        },
        {
          "name": "Get Conversations",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/conversations",
              "host": ["{{baseUrl}}"],
              "path": ["api", "conversations"]
            }
          }
        }
      ]
    },
    {
      "name": "💰 Payment Integration",
      "item": [
        {
          "name": "Create PayPal Payment",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"amount\": \"25.00\",\n  \"currency\": \"EUR\",\n  \"description\": \"SichrPlace Viewing Service Fee\",\n  \"returnUrl\": \"http://localhost:3001/payment-success\",\n  \"cancelUrl\": \"http://localhost:3001/payment-cancel\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/payment/create",
              "host": ["{{baseUrl}}"],
              "path": ["api", "payment", "create"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Payment creation initiated', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains payment data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('paymentId');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "⚙️ System Settings",
      "item": [
        {
          "name": "Get Public System Settings",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/settings/public",
              "host": ["{{baseUrl}}"],
              "path": ["api", "settings", "public"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Public settings retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains settings array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
